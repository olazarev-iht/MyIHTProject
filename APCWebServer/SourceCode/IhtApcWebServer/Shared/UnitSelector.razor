@using IhtApcWebServer.Services
@using SharedComponents.IhtDev
@inject UnitService UnitService
@inherits IhtComponentBase


@if (UnitService != null)
{
    <MudPaper Class="ma-2 pa-1">
      <MudText Typo="Typo.body1">@LocalStrByKey("_CulturePressureUnit")</MudText>
      <MudRadioGroup T="IhtDevices.PressureUnit" SelectedOption="@UnitService.PressureUnit" SelectedOptionChanged="@PressureUnitChanged">
          <MudRadio Option="IhtDevices.PressureUnit.IsPressureBar" Color="Color.Primary" >bar</MudRadio>
          <MudRadio Option="IhtDevices.PressureUnit.IsPressurePsi" Color="Color.Secondary">psi</MudRadio>
      </MudRadioGroup>
    </MudPaper>

    <MudPaper Class="ma-2 pa-1">
      <MudText Typo="Typo.body1">@LocalStrByKey("_CultureLengthUnit")</MudText>
      <MudRadioGroup T="IhtDevices.LengthUnit" SelectedOption="@UnitService.LengthUnit" SelectedOptionChanged="@DistanceUnitChanged">
          <MudRadio Option="IhtDevices.LengthUnit.IsUnitMm" Color="Color.Primary" >mm</MudRadio>
          <MudRadio Option="IhtDevices.LengthUnit.IsUnitInch" Color="Color.Secondary">inch 0.125</MudRadio>
          <!--
          <MudRadio Option="IhtDevices.LengthUnit.IsUnitInchFractional" Color="Color.Secondary">inch 1/8</MudRadio>
          -->
      </MudRadioGroup>
    </MudPaper>
}

@code {

    protected override async Task OnInitializedAsync()
    {
        await UnitService.EnsureInitializedAsync();
        await base.OnInitializedAsync();
    }

    protected async Task PressureUnitChanged(IhtDevices.PressureUnit pressureUnit)
    {
        if (pressureUnit == UnitService.PressureUnit)
            return;

        await UnitService.SetPressureUnitAsync(pressureUnit);
    }

    protected async Task DistanceUnitChanged(IhtDevices.LengthUnit lengthUnit)
    {
        if (lengthUnit == UnitService.LengthUnit)
            return;

        await UnitService.SetDistanceUnitAsync(lengthUnit);
    }
}
