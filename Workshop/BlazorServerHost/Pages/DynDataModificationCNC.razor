@page "/dynDataModificationCNC"

@using BlazorServerHost.Features.HeightControlFeature.Services.CNC
@using SharedComponents.Models.APCHardware
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

@inject DynDataModificationCNCDataProvider dynDataModificationCNCDataProvider
@inherits ComponentBase
@implements IDisposable

<style>
.device_tabcell {
    width: 88px;
    height:50px;
    text-align: center;
}

.device_lastcell {
    width: 88px;
    height:50px;
    text-align: center;
}

.tabcell {
    width: 87px;
    height:50px;
    text-align: center;
}

table#controlPanel td  {
    border: 1px solid #e0e0e0;
}

.SelectedParamsType {
    background-color:aquamarine;
}

.UnselectedParamsType {
    background-color:aliceblue;
}

.SelectedDeviceNum {
    background-color:mistyrose;
}

.UnselectedDeviceNum {
    background-color:aliceblue;
}

.NotInUseDeviceNum {
    background-color:lightgrey;
}

.flex-container {
  display: flex;
  flex-direction: row;
}

.flex-item-left {
  float:left;
  flex: 50%;
}

.flex-item-right {
  flex: 50%;
}

.internal_div_table{
    width:268px; 
    height:197px;
}

.flex-container table{
    border-spacing: 1px;
}

button .mud-nav-link-text {
    font-size: medium;
    font-weight: 550 !important;
}

.tablemobile
{
    margin-left: auto;
    margin-right: auto;
}

.mud-dialog-container.mud-dialog-center
{
    top: -65px;
}
</style>

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }

    .mud-input-control.mud-select.myselect>.mud-input-control-input-container>div.mud-input.mud-input-text {
    margin-top: 0px; 
    }
</style>

@if (dynDataModificationCNCDataProvider != null)
{
    paramHeatO2 = dynDataModificationCNCDataProvider._paramHeatO2;
    paramFuelGas = dynDataModificationCNCDataProvider._paramFuelGas;

    if(dynDataModificationCNCDataProvider.CurrentParamsType == "Ignition")
    {
        paramFlameAdjust = dynDataModificationCNCDataProvider._paramFlameAdjust;
        _cutO2Visible = NONE_DISPLAY_CLASS;
        _flameAdjustVisible = VISIBLE_CLASS;
    }
    else if(dynDataModificationCNCDataProvider.CurrentParamsType != "PreHeat" 
            && dynDataModificationCNCDataProvider.CurrentParamsType != "Heat")
    {
        paramCutO2 = dynDataModificationCNCDataProvider._paramCutO2;
        _flameAdjustVisible = NONE_DISPLAY_CLASS;
        _cutO2Visible = VISIBLE_CLASS;
    }
    else
    {
        _flameAdjustVisible = NONE_DISPLAY_CLASS;
        _cutO2Visible = INVISIBLE_CLASS;
    }
<MudDialog @bind-IsVisible="_editParamDialogVisible" Style="width:500px">
    <TitleContent>
        <MudText Typo="Typo.h6"></MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@dynParamDataModel" @ref="_editParamForm">

            @*<MudTextField @bind-Value="@dynParamDataModel.Sign" Label="Sign" 
                For=@(() => dynParamDataModel.Sign) Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>*@

            <MudSlider @onchange="ParameterValChangedBySlider" @bind-Value="@dynParamDataModel.Position" 
            Min="1" Max="100" Step="1" Color="Color.Info">@dynParamDataModel.Name.ToString(): @dynParamDataModel.Position.ToString()</MudSlider>
            
        </MudForm>      
    </DialogContent>
    <DialogActions>
        <MudButton Color="MudBlazor.Color.Secondary" 
            OnClick="CloseEditParamDialog" onmousedown="return false">
            Close
        </MudButton>
        @*<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" 
            OnClick="CreateParamsAsync">
            Save
        </MudButton>*@
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="_setupParamsDialogVisible" Style="width: 600px;">
    <DialogContent>
    <MudButton OnClick="CloseSetupParamsDialog">Go Back</MudButton>
    <MudTable Hover="true" Breakpoint="Breakpoint.Sm" Height="500px" FixedHeader="true"
          Items="@Elements"
          GroupBy="@_groupDefinition"
          GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
          GroupFooterClass="mb-4"
          Dense="false"
          ReadOnly="false" OnRowClick="RowClickEvent" T="Element">
    <ColGroup>
        <col style="width: 60px;" />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        @*<MudTh>Sign</MudTh>*@
        <MudTh>Parameter</MudTh>
        <MudTh>Value</MudTh>
        @*<MudTh>Molar mass</MudTh>*@
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="5">@($"{context.GroupName}: {context.Key}")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="Nr">
            <MudButton Variant="Variant.Filled">@context.Number</MudButton></MudTd>
        @*<MudTd DataLabel="Sign">@context.Sign</MudTd>*@
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Position">
            @if(@context.Number == 1){
            <MudSelect T="int" @bind-Value="@context.Position" Placeholder="Position" Class="myselect" AnchorOrigin="Origin.CenterCenter" Style="margin-top: 0px;">
                <MudSelectItem T="int" Value="1">Enabled</MudSelectItem>
                <MudSelectItem T="int" Value="0">Disabled</MudSelectItem>
            </MudSelect>
            }
            else if(@context.Number == 2)
            {
                <MudSwitch @bind-Checked="@context.Position" Color="Color.Secondary">@(@context.Position == 1 ? "Enabled" : "Disabled")</MudSwitch>
            }
            else if(@context.Number == 10)
            {
            <MudSelect T="int" @bind-Value="@context.Position" Placeholder="Position" Class="myselect" Style="margin-top: 0px;">
                <MudSelectItem T="int" Value="0">Value 1</MudSelectItem>
                <MudSelectItem T="int" Value="1">Value 2</MudSelectItem>
                <MudSelectItem T="int" Value="2">Value 3</MudSelectItem>
                <MudSelectItem T="int" Value="3">Value 4</MudSelectItem>
                <MudSelectItem T="int" Value="4">Value 5</MudSelectItem>
            </MudSelect> 
            }
            else {
                @context.Position
            }
            </MudTd>
       @* <MudTd DataLabel="Position">
            <MudTextField @bind-Value="@context.Position" ReadOnly="true" Variant="Variant.Text" />
        </MudTd>*@
        @*<MudTd Style="text-align: right" DataLabel="Molar mass">@context.Molar"</MudTd>*@
    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">Total Mass: @context.Items.Sum((e) => e.Molar)</MudTh>
    </GroupFooterTemplate>
</MudTable>
</DialogContent>
</MudDialog>

<MudPaper Class="mud-theme-primary" Style="overflow:visible; position:absolute;">
<MudDialog @bind-IsVisible="_menuExpanded">
    <DialogContent>     
        <MudList Clickable="true" Style="Height:200px;" >
            <MudListItem Icon="@Icons.Filled.Settings" Text="Settings" InitiallyExpanded="false">
                <NestedList>
                    <MudListItem Icon="@Icons.Filled.Article" OnClick="OpenSetupParamsDialog">Setup</MudListItem>
                </NestedList>
            </MudListItem>
        </MudList>          
    </DialogContent>
    <DialogActions>
        @*<MudButton Color="MudBlazor.Color.Secondary" OnClick="CloseDeleteParamsModal">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="DeleteParamsAsync">Delete</MudButton>*@
    </DialogActions>
</MudDialog>
</MudPaper>

<div class="flex-container" >
    <table id="controlPanel" class="tablemobile" width="540px">
        <tr>
            <MudText Typo="Typo.h4">Dynamic Params Modification (CNC)</MudText>
        </tr>
        <tr>
            <td>
                <div class="flex-item-left">
                    <table>
                        <tr>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(1)"
            @onclick="@(()=>SetDeviceNum(1))">1</MudTd>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(2)"
            @onclick="@(()=>SetDeviceNum(2))">2</MudTd>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(3)"
            @onclick="@(()=>SetDeviceNum(3))">3</MudTd>
                        </tr>
                    </table>
                 </div>
                 <div class="flex-item-right">
                    <table style="width:268px;">
                        <tr>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(4)"
            @onclick="@(()=>SetDeviceNum(4))">4</MudTd>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(5)"
            @onclick="@(()=>SetDeviceNum(5))">5</MudTd>
            <MudTd Style="font-weight:bold; padding:0px;" Class="device_lastcell">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" OnClick="@((e) => ToggleMenu())" />           
            </MudTd>
                        </tr>
                    </table>
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="flex-item-left">
                    <table>
                        <tr>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(6)"
            @onclick="@(()=>SetDeviceNum(6))">6</MudTd>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(7)"
            @onclick="@(()=>SetDeviceNum(7))">7</MudTd>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(8)"
            @onclick="@(()=>SetDeviceNum(8))">8</MudTd>
                        </tr>
                    </table>
                </div>
                <div class="flex-item-right">
                    <table style="width:268px;">
                        <tr>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(9)"
            @onclick="@(()=>SetDeviceNum(9))">9</MudTd>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(10)"
            @onclick="@(()=>SetDeviceNum(10))">10</MudTd>
            <MudTd Style="font-weight:bold;" Class="device_lastcell">&nbsp;E&nbsp;</MudTd>
                        </tr>
                    </table>
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="flex-item-left">
                <table class="internal_div_table">
                    <tr>
                        <td>
                            <MudSlider @ontouchend="@(()=>UpdateDynParam(@paramHeatO2))" @onmouseup="@(()=>UpdateDynParam(@paramHeatO2))"
                            @bind-Value="@paramHeatO2.DynParams.Value" 
                            Min="@paramHeatO2.DynParams.ConstParams.Min" 
                            Max="@paramHeatO2.DynParams.ConstParams.Max"
                            Step="@paramHeatO2.DynParams.ConstParams.Step" 
                            Color="Color.Info">Flame (H-O): @paramHeatO2.DynParams.Value.ToString()
                            </MudSlider>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <MudSlider @ontouchend="@(()=>UpdateDynParam(@paramFuelGas))" @onmouseup="@(()=>UpdateDynParam(@paramFuelGas))"
                            @bind-Value="@paramFuelGas.DynParams.Value" 
                            Min="@paramFuelGas.DynParams.ConstParams.Min" 
                            Max="@paramFuelGas.DynParams.ConstParams.Max"
                            Step="@paramFuelGas.DynParams.ConstParams.Step" 
                            Color="Color.Info">F - G: @paramFuelGas.DynParams.Value.ToString()
                            </MudSlider>
                        </td>
                    </tr>
                    <tr>
                        <td>                            
                            <MudSlider Class="@_cutO2Visible" @ontouchend="@(()=>UpdateDynParam(@paramCutO2))" @onmouseup="@(()=>UpdateDynParam(@paramCutO2))"                
                            @bind-Value="@paramCutO2.DynParams.Value" 
                            Min="@paramCutO2.DynParams.ConstParams.Min" 
                            Max="@paramCutO2.DynParams.ConstParams.Max"
                            Step="@paramCutO2.DynParams.ConstParams.Step" 
                            Color="Color.Info">C - O: @paramCutO2.DynParams.Value.ToString()
                            </MudSlider>
                           
                            <MudSlider Class="@_flameAdjustVisible" @ontouchend="@(()=>UpdateDynParam(@paramFlameAdjust))" @onmouseup="@(()=>UpdateDynParam(@paramFlameAdjust))"
                            @bind-Value="@paramFlameAdjust.DynParams.Value" 
                            Min="@paramFlameAdjust.DynParams.ConstParams.Min" 
                            Max="@paramFlameAdjust.DynParams.ConstParams.Max"
                            Step="@paramFlameAdjust.DynParams.ConstParams.Step" 
                            Color="Color.Info">Flame Adjust: @paramFlameAdjust.DynParams.Value.ToString()
                            </MudSlider>
                        </td>
                    </tr>
                </table>
                </div>
                <div class="flex-item-right">
                    <table class="internal_div_table">
                        <tr>
                            <td class="device_tabcell">Up 
                                <MudSlider @onchange="OnTorchStateChanged" @bind-Value="@spValueCurrent" Style="height:50%"
                                Disabled="@dynDataModificationCNCDataProvider.IsCurrentDeviceBusy" 
                                Vertical="true"
                                Min="49" 
                                Max="51"
                                Step="1" 
                                Color="Color.Info">Stop</MudSlider>
                                Down 
                            </td>
                            <td colspan="2">
                                <table width="100%" height="100%">
                                    <tr>
                                        <td width="50%" height="50%">Calib1</td>
                                        <td width="50%" height="50%">Calib2</td>
                                    </tr>
                                    <tr>
                                        <td rowspan="2">Empty</td>
                                        <td>
                                            <table width="100%" height="100%">
                                                <tr><td>img1</td></tr>
                                                <tr><td>img2</td></tr>
                                            </table>
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    </table>
                </div>
            </td>                      
        </tr>
        <tr>
            <td>
                <div class="flex-item-left">
                    <table>
                        <tr>
            <MudTd Style="font-weight:bold;" Class="@GetParamsTypeClass("Ignition")"
            @onclick="@(()=>SetParamsType("Ignition"))">Ignition</MudTd>
            <MudTd Style="font-weight:bold;" Class="@GetParamsTypeClass("PreHeat")"
            @onclick="@(()=>SetParamsType("PreHeat"))">Preheat</MudTd>
            <MudTd Style="font-weight:bold;" Class="@GetParamsTypeClass("Pierce")"
            @onclick="@(()=>SetParamsType("Pierce"))">Piercing</MudTd>
                        </tr>
                    </table>
                 </div>
                 <div class="flex-item-right">
                    <table>
                        <tr>
            <MudTd Style="font-weight:bold;" Class="@GetParamsTypeClass("Cut")"
            @onclick="@(()=>SetParamsType("Cut"))">Cutting</MudTd>
            <MudTd Style="font-weight:bold;" Class="@GetParamsTypeClass("Heat")"
            @onclick="@(()=>SetParamsType("Heat"))">Heating</MudTd>
            <td style="width:90px">&nbsp;</td>   
                        </tr>
                    </table>
                </div>
            </td>
        </tr>
    </table>
</div>

}
@code {

    public event EventHandler? DynamicAPCParamsClientChanged;
    public event EventHandler? APCTorchPositionChanged;
    public event EventHandler? APCTorchPositionStoped;
    public static event EventHandler? ClientStartedOrStoppedWorkingWithDeviceRefreshIsNeeded;

    private ParameterDataModel paramHeatO2 = new();
    private ParameterDataModel paramFuelGas = new();
    private ParameterDataModel paramCutO2 = new();
    private ParameterDataModel paramFlameAdjust = new();

    private string _cutO2Visible;
    private string _flameAdjustVisible;
    private string INVISIBLE_CLASS = "invisible";
    private string VISIBLE_CLASS = "visible";

    private string NONE_DISPLAY_CLASS = "d-none";
    private string DISPLAY_CLASS = "d-block";

    private int spValueOriginal = 50;
    private int spValueCurrent = 50;
    private string currentTorchEventName = string.Empty;
    private bool isTorchStartedMoving = false;
    private bool _menuExpanded = false;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////

    private bool _setupParamsDialogVisible = false;
    private Element dynParamDataModel = new Element();
    private bool _editParamDialogVisible = false;
    private int _sliderDynParamValue;

    private MudForm _editParamForm;

    private TableGroupDefinition<Element> _groupDefinition = new()
    {
        GroupName = "Group",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.Group
    };

    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>("https://mudblazor.com/webapi/periodictable");

        if (Elements != null)
        {
            Elements.ToArray()[1].Position = 1;
            Elements.ToArray()[9].Position = 3;
        }
    }

    private void OpenSetupParamsDialog()
    {
        _setupParamsDialogVisible = true;
    }

    private void CloseSetupParamsDialog()
    {
        _setupParamsDialogVisible = false;
    }

    private void OpenEditParamDialog(int id)
    {
        dynParamDataModel = Elements.FirstOrDefault(c => c.Number == id) ?? new Element();
        // _sliderDynParamValue = dynParamDataModel.Position;

        _editParamDialogVisible = true;
    }

    private void CloseEditParamDialog()
    {
        // dynParamDataModel.Position = _sliderDynParamValue;

        _editParamDialogVisible = false;
    }

    private bool GetReadOnlyStatus(int number)
    {
        var returnVal = false;

        if(number == 1)
        {
            returnVal = true;
        }

        return returnVal;
    }

    private void RowClickEvent(TableRowClickEventArgs<Element> tableRowClickEventArgs)
    {
        if (tableRowClickEventArgs.Item.Number > 2 && tableRowClickEventArgs.Item.Number != 10)
        {
            OpenEditParamDialog(tableRowClickEventArgs.Item.Number);
        }

    }

    private void ParameterValChangedBySlider()
    {
        // Save data in to the DB
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////

    private string drawerDisplay {
        get
        {
            return _menuExpanded ? DISPLAY_CLASS : NONE_DISPLAY_CLASS;
        }
    }

    private void ToggleMenu()
    {
        _menuExpanded = !_menuExpanded;

    }

    protected override void OnInitialized()
    {
        dynDataModificationCNCDataProvider.DynamicAPCParamsDataChanged += DynamicAPCParamsOnDynamicAPCParamsDataChanged;
        this.DynamicAPCParamsClientChanged += dynDataModificationCNCDataProvider.dynamicParamsDysplay_DynamicAPCParamsClientChanged;

        // Subscribe of Data Provider for the Client Event of moving torch (Up or Down)
        this.APCTorchPositionChanged += dynDataModificationCNCDataProvider.dynamicParamsDysplay_APCTorchPositionChanged;

        // Subscribe of Data Provider for the Client Event of stopping the torch
        this.APCTorchPositionStoped += dynDataModificationCNCDataProvider.dynamicParamsDysplay_APCTorchPositionStoped;

        // Subscribe for event of client stopping working with the torch
        ClientStartedOrStoppedWorkingWithDeviceRefreshIsNeeded += DynamicAPCParamsOnDynamicAPCParamsDataChanged;

        base.OnInitialized();
    }



    private async void SetParamsType(string paramsType)
    {
        dynDataModificationCNCDataProvider.CurrentParamsType = paramsType;

        await dynDataModificationCNCDataProvider.RefreshDynamicDataModelToDisplayAsync();

        await InvokeAsync(StateHasChanged);
    }

    private async void SetDeviceNum(int deviceNum)
    {
        if (deviceNum <= dynDataModificationCNCDataProvider.APCDevicesCount)
        {
            // Stop the SP moving
            StopTorchMoving();

            // Reset the SP value to the start val
            spValueCurrent = 50;

            dynDataModificationCNCDataProvider.CurrentDeviceNumber = deviceNum;

            await dynDataModificationCNCDataProvider.RefreshDynamicDataModelToDisplayAsync();

            await InvokeAsync(StateHasChanged);
        }
    }

    private string GetParamsTypeClass(string selectedType)
    {
        if (selectedType.ToLower() == dynDataModificationCNCDataProvider.CurrentParamsType.ToLower())
            return "SelectedParamsType tabcell";
        return "UnselectedParamsType tabcell";
    }

    private string GetDeviceNumClass(int selectedNum)
    {
        var cssClass = "NotInUseDeviceNum device_tabcell";

        if (selectedNum == dynDataModificationCNCDataProvider.CurrentDeviceNumber){
            cssClass = "SelectedDeviceNum device_tabcell";
        }
        else if(selectedNum <= dynDataModificationCNCDataProvider.APCDevicesCount){
            cssClass = "UnselectedDeviceNum device_tabcell";
        }

        return cssClass;
    }

    private void StopTorchMoving()
    {
        if (isTorchStartedMoving)
        {
            isTorchStartedMoving = false;

            this.APCTorchPositionStoped?.Invoke("StopTorch", EventArgs.Empty);

            ClientStartedOrStoppedWorkingWithDeviceRefreshIsNeeded?.Invoke(this, EventArgs.Empty);
        }
    }

    private void OnTorchStateChanged()
    {
        var newEventName = string.Empty;

        //if (isTorchStartedMoving) return;

        if (spValueOriginal < spValueCurrent)
        {
            newEventName = "MoveTorchUp";
        }
        else if (spValueOriginal > spValueCurrent)
        {
            newEventName = "MoveTorchDown";
        }
        else
        {
            StopTorchMoving();
        }

        if (!string.IsNullOrWhiteSpace(newEventName))
        {
            // We change torch moving direction witout switching to stop position
            if (isTorchStartedMoving)
            {
                StopTorchMoving();
            }

            currentTorchEventName = newEventName;

            StartMovingTorch(currentTorchEventName);
        }
    }

    private void StartMovingTorch(string eventName)
    {
        if (!isTorchStartedMoving)
        {
            isTorchStartedMoving = true;

            this.APCTorchPositionChanged?.Invoke(eventName, EventArgs.Empty);

            ClientStartedOrStoppedWorkingWithDeviceRefreshIsNeeded?.Invoke(this, EventArgs.Empty);
        }
    }

    private void UpdateDynParam(ParameterDataModel parameterData)
    {
        OnParamChanged(parameterData);
    }

    private async void DynamicAPCParamsOnDynamicAPCParamsDataChanged(object? sender, EventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        dynDataModificationCNCDataProvider.DynamicAPCParamsDataChanged -= DynamicAPCParamsOnDynamicAPCParamsDataChanged;
        this.DynamicAPCParamsClientChanged -= dynDataModificationCNCDataProvider.dynamicParamsDysplay_DynamicAPCParamsClientChanged;

        this.DynamicAPCParamsClientChanged -= dynDataModificationCNCDataProvider.dynamicParamsDysplay_APCTorchPositionChanged;
        this.APCTorchPositionStoped -= dynDataModificationCNCDataProvider.dynamicParamsDysplay_APCTorchPositionStoped;

        // Stop the SP moving and refresh component for all the users
        dynDataModificationCNCDataProvider.StopMovingTorchAsync();
        ClientStartedOrStoppedWorkingWithDeviceRefreshIsNeeded?.Invoke(this, EventArgs.Empty);

        ClientStartedOrStoppedWorkingWithDeviceRefreshIsNeeded -= DynamicAPCParamsOnDynamicAPCParamsDataChanged;
    }

    private void ParamSelected1(ChangeEventArgs args)
    {
        //dynDataModificationCNCDataProvider._paramHeatO2.DynParams.Value = args.Value;
        //OnParamChanged();
    }

    private void OnParamChanged(object eventParam)
    {
        this.DynamicAPCParamsClientChanged?.Invoke(eventParam, EventArgs.Empty);
    }

}