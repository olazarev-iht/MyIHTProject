@page "/dynDataModificationCNC/{ComponentMode}"

@using BlazorServerHost.Features.HeightControlFeature.Services.CNC
@using SharedComponents.IhtDev
@using SharedComponents.IhtModbus
@using SharedComponents.APCCommunic
@using SharedComponents.Models.APCHardware
@using SharedComponents.Services.APCHardwareManagers
@using SharedComponents.Services.APCHardwareMockDBServices
@using MudBlazor.Examples.Data.Models
@using System.IO.Ports					  

@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject IhtDevices ihtDevices

@inject DynDataModificationCNCDataProvider dynDataModificationCNCDataProvider
@inject IParameterDataInfoManager parameterDataInfoManager
@inject IAPCSimulationDataMockDBService apcSimulationDataMockDBService
@inject APCCommunicManager apcCommunicManager
@inherits ComponentBase
@implements IDisposable

<style>
.device_tabcell {
    width: 88px;
    height:50px;
    text-align: center;
}

.device_lastcell {
    width: 88px;
    height:50px;
    text-align: center;
}

.tabcell {
    width: 87px;
    height:50px;
    text-align: center;
}

.divcell {
    width: 87px;
    height: 63px;
    text-align: center;
}

table#controlPanel td  {
    border: 1px solid #e0e0e0;
}

.SelectedParamsType {
    background-color:aquamarine;
}

.UnselectedParamsType {
    background-color:aliceblue;
}

.FlameIsOff {
    background-color:#3D6FB4;
}

.FlameIsOn {
    background-color:#FF584F;
}

.SelectedDeviceNum {
    background-color:#3D6FB4;
    color: #ffff;
}

.UnselectedDeviceNum {
    background-color:violet;
    color: #ffff;
}

.NotConnectedDevice {
    background-color:red;
    color: #ffff;
}

.NotInUseDeviceNum {
    background-color:lightgrey;
    color: #ffff;
}

.flex-container {
  display: flex;
  flex-direction: row;
  -webkit-user-select: none; /* Safari */
  -ms-user-select: none; /* IE 10 and IE 11 */
  user-select: none; /* Standard syntax */
}

.flex-item-left {
  float:left;
  flex: 50%;
}

.flex-item-right {
  flex: 50%;
}

.internal_div_table{
    width:268px; 
    height:197px;
}

.flex-container table{
    border-spacing: 1px;
}

button .mud-nav-link-text {
    font-size: medium;
    font-weight: 550 !important;
}

.tablemobile
{
    margin-left: auto;
    margin-right: auto;
}

.mud-dialog-container.mud-dialog-center
{
    top: -65px;
}

.password-dialog {
    background-color:aliceblue; 
    font-weight:bold;
    cursor: default;
    text-align: center;
    width:33%;
}

th.password-dialog:hover {
  background-color: lightgrey;
}

input#password-input {
  font-size: 25px;
  border: none;
  background: transparent;
  width: 100px;
  text-indent: 9px;
  letter-spacing: 5px;
}

input#password-input:focus {
  outline: none;
}

.centered {
  position: fixed;
  top: 50%;
  left: 50%;
  /* bring your own prefixes */
  transform: translate(-50%, -50%);
}
</style>

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        /*padding-bottom: 50px;*/
        text-align: right;
    }

    .mud-input-control.mud-select.myselect>.mud-input-control-input-container>div.mud-input.mud-input-text {
    margin-top: 0px; 
    }

    .mud-dialog .mud-dialog-title  {
        padding: 16px 24px 0px;
    }

    .mud-dialog.mud-dialog-width-sm {
        position: relative !important; 
        top: 50px !important;
    }

    .mud-table-cell  {
        font-size: 1rem;
        padding: 11.5px;
    }
</style>

@if (dynDataModificationCNCDataProvider != null)
{
    paramHeatO2 = dynDataModificationCNCDataProvider._paramHeatO2;
    paramFuelGas = dynDataModificationCNCDataProvider._paramFuelGas;

    if(dynDataModificationCNCDataProvider.CurrentParamsType == "Ignition")
    {
        paramFlameAdjust = dynDataModificationCNCDataProvider._paramFlameAdjust;
        _cutO2Visible = NONE_DISPLAY_CLASS;
        _flameAdjustVisible = VISIBLE_CLASS;
    }
    else if(dynDataModificationCNCDataProvider.CurrentParamsType != "PreHeat" 
            && dynDataModificationCNCDataProvider.CurrentParamsType != "Heat")
    {
        paramCutO2 = dynDataModificationCNCDataProvider._paramCutO2;
        _flameAdjustVisible = NONE_DISPLAY_CLASS;
        _cutO2Visible = VISIBLE_CLASS;
    }
    else
    {
        _flameAdjustVisible = NONE_DISPLAY_CLASS;
        _cutO2Visible = INVISIBLE_CLASS;
    }
<MudDialog @bind-IsVisible="_editParamDialogVisible" Style="width: 500px;">
    <TitleContent>
        <MudText Typo="Typo.h6"></MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@dynParamDataModel" @ref="_editParamForm">

            @*<MudTextField @bind-Value="@dynParamDataModel.Sign" Label="Sign" 
                For=@(() => dynParamDataModel.Sign) Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>*@

            <MudSlider @onchange="ParameterValChangedBySlider" @bind-Value="@dynParamDataModel.DynParams.Value" 
                Min="@dynParamDataModel.DynParams.ConstParams.Min" Max="@dynParamDataModel.DynParams.ConstParams.Max" 
                Step="@dynParamDataModel.DynParams.ConstParams.Step" 
                Color="Color.Info">@dynParamDataModel.ParamName: @dynParamDataModel.DynParams.Value.ToString()
            </MudSlider>            
        </MudForm>      
    </DialogContent>
    <DialogActions>
        <MudButton Color="MudBlazor.Color.Secondary" 
            OnClick="CloseEditParamDialog" onmousedown="return false">
            Close
        </MudButton>
        @*<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" 
            OnClick="CreateParamsAsync">
            Save
        </MudButton>*@
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="_setupPasswordDialogVisible" Style="width:280px">
    <TitleContent>
        <MudTh Style="text-align:left;border-bottom:0px">
            <MudButton Color="MudBlazor.Color.Primary" OnClick="@(() => ResetPassword())">Reset to Level 0</MudButton>
        </MudTh>
    </TitleContent>
    <DialogContent>
        <table class="center-mud-text" style="table-layout: fixed; width: 100%;">
            <tr>
                <td style="border: 0px solid white;" colspan="2">
                    <input type="password" id="password-input" minlength="4" maxlength="4" size="4" 
                    @bind-value="_setupPasswordValue" style="border: 0px solid; width:50%" readonly="readonly"/>
                </td>
                <MudTh Class="password-dialog" @onclick="@(()=>GetEditPassword("x"))">&#8592;</MudTh>
            </tr>
            <tr>
                <MudTh Class="password-dialog" @onclick="@(()=>GetEditPassword("7"))">7</MudTh>
                <MudTh Class="password-dialog" @onclick="@(()=>GetEditPassword("8"))">8</MudTh>
                <MudTh Class="password-dialog" @onclick="@(()=>GetEditPassword("9"))">9</MudTh>
            </tr>
            <tr>
                <MudTh Class="password-dialog" @onclick="@(()=>GetEditPassword("4"))">4</MudTh>
                <MudTh Class="password-dialog" @onclick="@(()=>GetEditPassword("5"))">5</MudTh>
                <MudTh Class="password-dialog" @onclick="@(()=>GetEditPassword("6"))">6</MudTh>
            </tr>
            <tr>
                <MudTh Class="password-dialog" @onclick="@(()=>GetEditPassword("1"))">1</MudTh>
                <MudTh Class="password-dialog" @onclick="@(()=>GetEditPassword("2"))">2</MudTh>
                <MudTh Class="password-dialog" @onclick="@(()=>GetEditPassword("3"))">3</MudTh>
            </tr>
            <tr>
                <MudTh Class="password-dialog" @onclick="@(()=>GetEditPassword("0"))">0</MudTh>
                <MudTh Class="password-dialog" Style="padding: 0px;">&nbsp;</MudTh>
                <MudTh Class="password-dialog" Style="padding: 0px;">
                    <MudButton Color="MudBlazor.Color.Secondary" OnClick="@(()=>ClosePasswordSetupDialog())">Close</MudButton>
                </MudTh>
            </tr>
        </table>
    </DialogContent>
</MudDialog>

<MudDialog @bind-IsVisible="_setupParamsDialogVisible" Style="width: 600px;">
    <DialogContent>
    <MudButton OnClick="CloseSetupParamsDialog">&#8592; Go Back</MudButton>
    <MudTable Hover="true" Breakpoint="Breakpoint.Sm" Height="500px" FixedHeader="true"
          Items="@Elements"
          GroupBy="@_groupDefinition"
          GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
          GroupFooterClass="mb-4"
          Dense="false"
          ReadOnly="false" OnRowClick="RowClickEvent" T="ParameterDataModel">
    <ColGroup>
        <col style="width: 60px;" />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        @*<MudTh Style="font-weight:bold;">Nr</MudTh>*@
        @*<MudTh>Sign</MudTh>*@
        <MudTh Style="font-weight:bold;">Parameter</MudTh>
        <MudTh Style="font-weight:bold;width:45%">Value</MudTh>
        @*<MudTh>Molar mass</MudTh>*@
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="5">@($"{context.Key}")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.DynParams.ParameterDataInfo?.ValueDescription</MudTd>
        <MudTd DataLabel="Value">
            @if(@context.ParamName == IhtModbusParamDyn.eIdxAdditional.PreflowActive.ToString()){
                <MudSlider @bind-Value="@preflowActiveValue" Disabled="@preflowActiveDisabled" Min="0" Max="5" Step="1" Color="Color.Info">
                    @preflowActiveValue.ToString() s
                </MudSlider>
            }
            else if(@context.ParamName == IhtModbusParamDyn.eIdxAdditional.StartPreflow.ToString())
            {
                <MudSwitch @bind-Checked="@PreflowStarted" Color="Color.Secondary">
                    @(@context.DynParams.Value == 1 ? 
                    @context.DynParams?.ParameterDataInfo?.ViewParameter?.Values[1] : 
                    @context.DynParams?.ParameterDataInfo?.ViewParameter?.Values[0])
                </MudSwitch>
            }
            else if(@context.DynParams?.ParameterDataInfo?.ViewParameter?.Mode == "Switch")
            {
                <MudSwitch @bind-Checked="@context.DynParams.Value" Color="Color.Secondary">
                    @(@context.DynParams.Value == 1 ? 
                    @context.DynParams?.ParameterDataInfo?.ViewParameter?.Values[1] : 
                    @context.DynParams?.ParameterDataInfo?.ViewParameter?.Values[0])
                </MudSwitch>
            }
            else if(@context.DynParams?.ParameterDataInfo?.ViewParameter?.Mode == "Select"){
                @context.DynParams?.ParameterDataInfo?.ViewParameter?.Values[@context.DynParams.Value]
            }
            @*else if(@context.DynParams?.ParameterDataInfo?.ViewParameter?.Mode == "Select")
            { int i = 0; 
            <MudSelect T="int" @bind-Value="@context.DynParams.Value" Class="myselect" Style="margin-top: 0px;">
                @foreach (var paramText in @context.DynParams?.ParameterDataInfo?.ViewParameter?.Values)
                {
                    <MudSelectItem T="int" Value="@i">@paramText</MudSelectItem>

                    i = i + 1;
                }
            </MudSelect> 
            }*@
            @*else if(@context.Number == 18){
                @context.Sign;
            }*@
            else {
                @context.DynParams.Value
            }
            </MudTd>
       @* <MudTd DataLabel="Position">
            <MudTextField @bind-Value="@context.Position" ReadOnly="true" Variant="Variant.Text" />
        </MudTd>*@
        @*<MudTd Style="text-align: right" DataLabel="Molar mass">@context.Molar"</MudTd>*@
    </RowTemplate>
    @*<GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">Total Mass: @context.Items.Sum((e) => e.Molar)</MudTh>
    </GroupFooterTemplate>*@
</MudTable>
</DialogContent>
</MudDialog>


<MudDialog @bind-IsVisible="_isOpenParamsListDialog" Class="SelectDialog">
    <TitleContent>
        <MudText Typo="Typo.h6">Param: @dynParamDataModel.ParamName</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@dynParamDataModel" @ref="_editParamListFormDialog">
        <MudList Clickable="true"                  
            SelectedItemChanged="SelectedListItemParamChanged">
            @*<MudListSubheader>
            <MudChip Color="Color.Secondary">
                (@(selectedItemParamValue?.ToString() ?? "0")) -- Position: @dynParamDataModel.Position
            </MudChip>
            </MudListSubheader>*@
            @{ int i = 0; }
            @foreach (var paramText in @dynParamDataModel.DynParams?.ParameterDataInfo?.ViewParameter?.Values)
            {
                <MudListItem T="int" Value="@i">@paramText</MudListItem>
                i = i + 1;
            }

        </MudList>    
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="MudBlazor.Color.Secondary" OnClick="CloseParamsListDialog">Close</MudButton>
        @*<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="DeleteParamsAsync">Delete</MudButton>*@
    </DialogActions>
</MudDialog>


<MudDialog @bind-IsVisible="_menuExpanded">
    <TitleContent>
        <MudText Typo="Typo.h6">Level @((int)_userPasswordLevel)</MudText>
        <br/>
        <MudLink Style="color:#6d7781 !important" Href="/apcMainControl">Cutting Data</MudLink>
        <br/>
        <MudLink Style="color:#6d7781 !important" Href="@HrefToOtherComponentMode">@OtherComponentMode Mode</MudLink>
    </TitleContent>
    <DialogContent>     
        <MudList Clickable="true" Style="Height:200px;" >
            <MudListItem Icon="@Icons.Filled.Settings" Text="Settings" InitiallyExpanded="false">
                <NestedList>
                    <MudListItem Icon="@Icons.Filled.Article" OnClick="OpenSetupParamsDialog">Setup</MudListItem>
                    <MudListItem Icon="@Icons.Filled.Article" OnClick="OpenPasswordSetupDialog">Password</MudListItem>
                    <MudListItem Icon="@Icons.Filled.Article" OnClick="OpenTorchInstalledDialog">Torch Installed</MudListItem>
                </NestedList>
            </MudListItem>
        </MudList>          
    </DialogContent>
    <DialogActions>
        @*<MudButton Color="MudBlazor.Color.Secondary" OnClick="CloseDeleteParamsModal">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="DeleteParamsAsync">Delete</MudButton>*@
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="_torchInstalledDialogVisible" Style="width:500px">
    <TitleContent>
        <MudText Typo="Typo.h6">Torch Installed</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm>
            <table width="100%">
                <tr>
                    <MudTh>Torch selection</MudTh>
                    <MudTh>Torch Type</MudTh>
                </tr>
                <tr>
                    <td colspan="2">
                        <div style="position:absolute; top: 150px; left: 250px;">
                            <MudProgressCircular Style="height:70px;width:70px;" Color="Color.Primary" Indeterminate="true" Class="@drawerDisplay" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td width="50%">
                        <MudOverlay Visible="_torchInstalledDialogIsBlocked" LightBackground="true" Absolute="true" />
            <MudGrid>
        @foreach (IhtDevice ihtDevice in ihtDevices.GetDevices().OrderBy(v => v.DeviceNumber))
        {
            <MudItem xs="6">
                    @*<input type="checkbox" @bind="@device.IsVisible" /> @:@device.DeviceNumber.ToString();*@
                    <MudCheckBox @bind-Checked="@ihtDevice.IsVisible" Dense="false" Color="Color.Primary" Disabled="@IsDeviceDisabled(ihtDevice.IsEnabled)">
                        <MudText Style="font-size: 13px;font-weight: 500;" Typo="Typo.subtitle1">Torch @ihtDevice.DeviceNumber</MudText>
                    </MudCheckBox>
            </MudItem>
        }  
            </MudGrid>
                    </td>
                    <td width="50%" valign="top" style="border-width: 0 0 0 1px;border-color: #e0e0e0">
                        <MudSelect T="IhtDevices.TorchType" @bind-Value="@ihtDevices.TorchTypeSetup" Class="myselect" Style="margin-top: 0px;">             
                            <MudSelectItem T="IhtDevices.TorchType" Value="@(IhtDevices.TorchType.Propane)">Propane</MudSelectItem>
                            <MudSelectItem T="IhtDevices.TorchType" Value="@(IhtDevices.TorchType.Acetylane)">Acetylene</MudSelectItem>
                            <MudSelectItem T="IhtDevices.TorchType" Value="@(IhtDevices.TorchType.NaturalGas)">Natural Gas</MudSelectItem>
                        </MudSelect>

                        <br />
                        <MudTh>COM Port</MudTh>
                        <MudSelect T="string" @bind-Value="@_nameComPort" Class="myselect" Style="margin-top: 0px;">             
                          @foreach (string s in SerialPort.GetPortNames())
                          {
                            <MudSelectItem T="string" Value="@s">@s</MudSelectItem>
                          }  
                        </MudSelect>

                        <br/>
                        <MudTh>Device Connection</MudTh>
                        <MudButton Variant="Variant.Filled" Style="align-content" OnClick="Connection" Disabled="@IsDeviceConnectionDisabled()">Connection</MudButton>
                        <MudCheckBox @bind-Checked="@_performResetDevices" Dense="false" Color="Color.Primary">
                            <MudText Style="font-size: 13px;font-weight: 500;" Typo="Typo.subtitle1">Perform a reset for all devices</MudText>
                        </MudCheckBox>																										
                        <MudCheckBox @bind-Checked="@_isSimulation" Dense="false" Color="Color.Primary">
                            <MudText Style="font-size: 13px;font-weight: 500;" Typo="Typo.subtitle1">Simulation (Demo-Mode)</MudText>
                        </MudCheckBox>								  

                    </td>
                </tr>
            </table>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="MudBlazor.Color.Secondary" 
            OnClick="CloseTorchInstalledDialog" onmousedown="return false">
            Close
        </MudButton>
        @*<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" 
            OnClick="CreateParamsAsync">
            Save
        </MudButton>*@
    </DialogActions>
</MudDialog>

<div class="flex-container" >
    <table id="controlPanel" class="tablemobile centered" width="540px">
        <tr>
            <MudText Typo="Typo.h4">Dynamic Params Modification (CNC)</MudText>
        </tr>
        <tr>
            <td>
                <div class="flex-item-left">
                    <table>
                        <tr>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(1)"
            @onclick="@(()=>SetDeviceNum(1))">1</MudTd>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(2)"
            @onclick="@(()=>SetDeviceNum(2))">2</MudTd>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(3)"
            @onclick="@(()=>SetDeviceNum(3))">3</MudTd>
                        </tr>
                    </table>
                 </div>
                 <div class="flex-item-right">
                    <table style="width:268px;">
                        <tr>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(4)"
            @onclick="@(()=>SetDeviceNum(4))">4</MudTd>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(5)"
            @onclick="@(()=>SetDeviceNum(5))">5</MudTd>
            <MudTd Style="font-weight:bold; padding:0px;" Class="device_lastcell">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" OnClick="@((e) => ToggleMenu())" />           
            </MudTd>
                        </tr>
                    </table>
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="flex-item-left">
                    <table>
                        <tr>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(6)"
            @onclick="@(()=>SetDeviceNum(6))">6</MudTd>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(7)"
            @onclick="@(()=>SetDeviceNum(7))">7</MudTd>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(8)"
            @onclick="@(()=>SetDeviceNum(8))">8</MudTd>
                        </tr>
                    </table>
                </div>
                <div class="flex-item-right">
                    <table style="width:268px;">
                        <tr>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(9)"
            @onclick="@(()=>SetDeviceNum(9))">9</MudTd>
            <MudTd Style="font-weight:bold;" Class="@GetDeviceNumClass(10)"
            @onclick="@(()=>SetDeviceNum(10))">10</MudTd>
            <MudTd Style="font-weight:bold;" Class="device_lastcell">&nbsp;E&nbsp;</MudTd>
                        </tr>
                    </table>
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="flex-item-left">
                <table class="internal_div_table">
                    <tr>
                        <td>
                            <MudSlider @ontouchend="@(()=>UpdateDynParam(@paramHeatO2))" @onmouseup="@(()=>UpdateDynParam(@paramHeatO2))"
                            @bind-Value="@paramHeatO2.DynParams.Value" 
                            Min="@paramHeatO2.DynParams.ConstParams.Min" 
                            Max="@paramHeatO2.DynParams.ConstParams.Max"
                            Step="@paramHeatO2.DynParams.ConstParams.Step" 
                            Color="Color.Info">Flame (H-O): @paramHeatO2.DynParams.Value.ToString()
                            </MudSlider>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <MudSlider @ontouchend="@(()=>UpdateDynParam(@paramFuelGas))" @onmouseup="@(()=>UpdateDynParam(@paramFuelGas))"
                            @bind-Value="@paramFuelGas.DynParams.Value" 
                            Min="@paramFuelGas.DynParams.ConstParams.Min" 
                            Max="@paramFuelGas.DynParams.ConstParams.Max"
                            Step="@paramFuelGas.DynParams.ConstParams.Step" 
                            Color="Color.Info">F - G: @paramFuelGas.DynParams.Value.ToString()
                            </MudSlider>
                        </td>
                    </tr>
                    <tr>
                        <td>                            
                            <MudSlider Class="@_cutO2Visible" @ontouchend="@(()=>UpdateDynParam(@paramCutO2))" @onmouseup="@(()=>UpdateDynParam(@paramCutO2))"                
                            @bind-Value="@paramCutO2.DynParams.Value" 
                            Min="@paramCutO2.DynParams.ConstParams.Min" 
                            Max="@paramCutO2.DynParams.ConstParams.Max"
                            Step="@paramCutO2.DynParams.ConstParams.Step" 
                            Color="Color.Info">C - O: @paramCutO2.DynParams.Value.ToString()
                            </MudSlider>
                           
                            <MudSlider Class="@_flameAdjustVisible" @ontouchend="@(()=>UpdateDynParam(@paramFlameAdjust))" @onmouseup="@(()=>UpdateDynParam(@paramFlameAdjust))"
                            @bind-Value="@paramFlameAdjust.DynParams.Value" 
                            Min="@paramFlameAdjust.DynParams.ConstParams.Min" 
                            Max="@paramFlameAdjust.DynParams.ConstParams.Max"
                            Step="@paramFlameAdjust.DynParams.ConstParams.Step" 
                            Color="Color.Info">Flame Adjust: @paramFlameAdjust.DynParams.Value.ToString()
                            </MudSlider>
                        </td>
                    </tr>
                </table>
                </div>
                <div class="flex-item-right">
                    <table class="internal_div_table">
                        <tr>
                            <td class="device_tabcell">
                                <MudPaper Style="position:relative; box-shadow: 0px 0px 0px 0px;">
                                <MudOverlay Visible="IsSPButtonsDisabled()" LightBackground="true" Absolute="true"/>
                                <div class="button_container">
                                    <div id="HCMoveTorchUp" class="@(_isHCTorchUpActive ? "up_btn active" : "up_btn")"
                                        @onpointerdown="@(async (e) => await HCMoveTorchUpAsync("HCMoveTorchUp"))"
                                        @onpointerup="@((_) => DeactiveButton("HCMoveTorchUp"))" @ontouchend="@((_) => DeactiveButton("HCMoveTorchUp"))"
                                        @onmouseout="@((_) => DeactiveButton("HCMoveTorchUp"))" @onmouseup="@((_) => DeactiveButton("HCMoveTorchUp"))">HCUp
                                    </div>
                                </div>
                                <div class="button_container">
                                    <div id="OnOff" class="@(_isHCTorchUpActive ? "central_btn active" : "central_btn")">
                                        On/<br />Off
                                    </div>
                                </div>
                                <div class="button_container">
                                    <div id="HCMoveTorchDown" class="@(_isHCTorchDownActive ? "down_btn active" : "down_btn")"
                                        @onpointerdown="@(async (e) => await HCMoveTorchDownAsync("HCMoveTorchDown"))"
                                        @onpointerup="@((_) => DeactiveButton("HCMoveTorchDown"))" @ontouchend="@((_) => DeactiveButton("HCMoveTorchDown"))"
                                        @onmouseout="@((_) => DeactiveButton("HCMoveTorchDown"))" @onmouseup="@((_) => DeactiveButton("HCMoveTorchDown"))">HCDown
                                    </div>
                               </div>
                              </MudPaper>
                            </td>
                            @if (ComponentMode == MANUAL_MODE)
                            {
                            <td class="device_tabcell">
                                <MudPaper Style="position:relative; box-shadow: 0px 0px 0px 0px;">
                                <MudOverlay Visible="IsSPButtonsDisabled()" LightBackground="true" Absolute="true"/>
                                <div class="button_container">
                                    <div id="MoveTorchUp" class="@(_isTorchUpActive ? "up_btn active" : "up_btn")"
                                        @onpointerdown="@(async (e) => await MoveTorchUpAsync("MoveTorchUp"))"
                                        @onpointerup="@((_) => DeactiveButton("MoveTorchUp"))" @ontouchend="@((_) => DeactiveButton("MoveTorchUp"))"
                                        @onmouseout="@((_) => DeactiveButton("MoveTorchUp"))" @onmouseup="@((_) => DeactiveButton("MoveTorchUp"))">Up
                                    </div>
                                </div>
                                <div class="button_container">
                                    <div class="central_btn" style="background-color:#ffff"></div>
                                </div>
                                <div class="button_container">
                                    <div id="MoveTorchDown" class="@(_isTorchDownActive ? "down_btn active" : "down_btn")"
                                        @onpointerdown="@(async (e) => await MoveTorchDownAsync("MoveTorchDown"))"
                                        @onpointerup="@((_) => DeactiveButton("MoveTorchDown"))" @ontouchend="@((_) => DeactiveButton("MoveTorchDown"))"
                                        @onmouseout="@((_) => DeactiveButton("MoveTorchDown"))" @onmouseup="@((_) => DeactiveButton("MoveTorchDown"))">Down
                                    </div>
                               </div>
                              </MudPaper>
                            </td>
                            <td class="device_tabcell" height="100%">
                                <MudPaper Style="position:relative; box-shadow: 0px 0px 0px 0px;">
                                <MudOverlay Visible="IsSPButtonsDisabled()" LightBackground="true" Absolute="true"/>
                                <div class="button_container">
                                    <div id="FlameOnButton" class="FlameIsOff flame_btn" style="display: @(!_isFlameOn ? "flex" : "none"); height:191px"
                                        @onclick="@(async (e) => await TurnFlameOnAsync())">On
                                    </div>
                                </div>
                                <div class="button_container">
                                    <div id="FlameOffButton" class="FlameIsOn flame_btn" style="display: @(_isFlameOn ? "flex" : "none"); height:191px"
                                        @onclick="@(async (e) => await TurnFlameOffAsync())">Off
                                </div>
                                </div>
                                </MudPaper>
                            </td>
                            }
                            else
                            {
                            <td class="device_tabcell">
                                <MudPaper Style="position:relative; box-shadow: 0px 0px 0px 0px;">
                                <MudOverlay Visible="IsSPButtonsDisabled()" LightBackground="true" Absolute="true"/>
                                <div class="button_container">
                                    <div id="MoveTorchUp" class="@(_isTorchUpActive ? "up_btn active" : "up_btn")"
                                        @onpointerdown="@(async (e) => await MoveTorchUpAsync("MoveTorchUp"))"
                                        @onpointerup="@((_) => DeactiveButton("MoveTorchUp"))" @ontouchend="@((_) => DeactiveButton("MoveTorchUp"))"
                                        @onmouseout="@((_) => DeactiveButton("MoveTorchUp"))" @onmouseup="@((_) => DeactiveButton("MoveTorchUp"))">CaUp
                                    </div>
                                </div>
                                <div class="button_container">
                                    <div id="CalibrateBtn" class="@(_isTorchUpActive ? "central_btn active" : "central_btn")">
                                        Cali-<br />brate
                                    </div>
                                </div>
                                <div class="button_container">
                                    <div id="MoveTorchDown" class="@(_isTorchDownActive ? "down_btn active" : "down_btn")"
                                        @onpointerdown="@(async (e) => await MoveTorchDownAsync("MoveTorchDown"))"
                                        @onpointerup="@((_) => DeactiveButton("MoveTorchDown"))" @ontouchend="@((_) => DeactiveButton("MoveTorchDown"))"
                                        @onmouseout="@((_) => DeactiveButton("MoveTorchDown"))" @onmouseup="@((_) => DeactiveButton("MoveTorchDown"))">CaDown
                                    </div>
                               </div>
                              </MudPaper>
                            </td>
                            <td class="device_tabcell">
                                <table style="border-spacing: 1px !important;"> 
                                    <tr>
                                        <td class="divcell">Flame<br />on End</td>
                                    </tr>
                                    <tr>
                                        <td class="divcell"></td>
                                    </tr>
                                    <tr>
                                        <td class="divcell">Start<br /> piercing</td>
                                    </tr>
                                </table>
                            </td>
                            }
                        </tr>
                    </table>
                </div>
            </td>                      
        </tr>
        <tr>
            <td>
                <div class="flex-item-left">
                    <table style="border-spacing: @(ComponentMode == MANUAL_MODE ? "1" : "0")px !important;">
                        <tr>
                            @if (ComponentMode == MANUAL_MODE)
                            {
                                <MudTd Style="font-weight:bold;" Class="@GetParamsTypeClass("Ignition")"
                                    @onclick="@(()=>SetParamsType("Ignition"))">Ignition</MudTd>
                                <MudTd Style="font-weight:bold;" Class="@GetParamsTypeClass("PreHeat")"
                                    @onclick="@(()=>SetParamsType("PreHeat"))">Preheat</MudTd>
                                <MudTd Style="font-weight:bold;" Class="@GetParamsTypeClass("Pierce")"
                                    @onclick="@(()=>SetParamsType("Pierce"))">Piercing</MudTd>
                            }
                            else
                            {
                                <td style="width:268px;border-width: 0px !important;" class="UnselectedParamsType tabcell">Status 1 @ComponentMode</td>
                            }
                        </tr>
                    </table>
                </div>
                <div class="flex-item-right">
                    <table style="border-spacing: @(ComponentMode == MANUAL_MODE ? "1" : "0")px !important;">
                        <tr>
                            @if (ComponentMode == MANUAL_MODE)
                            {
                                <MudTd Style="font-weight:bold;" Class="@GetParamsTypeClass("Cut")"
                                    @onclick="@(()=>SetParamsType("Cut"))">Cutting</MudTd>
                                <MudTd Style="font-weight:bold;" Class="@GetParamsTypeClass("Heat")"
                                    @onclick="@(()=>SetParamsType("Heat"))">Heating</MudTd>
                                <td style="width:90px" class="UnselectedParamsType">@ComponentMode</td>
                            }
                            else
                            {
                                <td style="width:268px;border-width: 0px !important;" class="UnselectedParamsType tabcell">Status 2 @ComponentMode</td>
                            }
                                </tr>
                            </table>                   
                        </div>
                    
            </td>
        </tr>
    </table>
</div>

}
@code {
    [Parameter]
    public string ComponentMode { get; set; } = PROCESS_MODE;

    private const string PROCESS_MODE = "Process";
    private const string MANUAL_MODE = "Manual";

    private string OtherComponentMode
    {
        get
        {
            return ComponentMode == PROCESS_MODE ? MANUAL_MODE : PROCESS_MODE;
        }
    }

    private string HrefToOtherComponentMode
    {
        get
        {
            return $"/dynDataModificationCNC/{@OtherComponentMode}";
        }
    }

    private bool _isSimulation = false;
    private string _nameComPort = string.Empty;

    private bool IsDeviceConnectionDisabled() => _nameComPort?.Length == 0 && !_isSimulation;

    public event EventHandler? DynamicAPCParamsClientChanged;
    public event EventHandler? APCTorchPositionChanged;
    public event EventHandler? APCTorchPositionStoped;
    public static event EventHandler? ClientStartedOrStoppedWorkingWithDeviceRefreshIsNeeded;
    public static event EventHandler? ConnectedTorchesInstalledClientReceivedDataRefreshIsNeeded;

    private ParameterDataModel paramHeatO2 = new();
    private ParameterDataModel paramFuelGas = new();
    private ParameterDataModel paramCutO2 = new();
    private ParameterDataModel paramFlameAdjust = new();

    private string _cutO2Visible;
    private string _flameAdjustVisible;
    private string INVISIBLE_CLASS = "invisible";
    private string VISIBLE_CLASS = "visible";

    private string NONE_DISPLAY_CLASS = "d-none";
    private string DISPLAY_CLASS = "d-block";

    //private int spValueOriginal = 50;
    private int spValueCurrent = 50;
    private string currentTorchEventName = string.Empty;
    private bool isTorchStartedMoving = false;
    private bool _menuExpanded = false;

    private bool _setupParamsDialogVisible = false;
    private ParameterDataModel dynParamDataModel = new ParameterDataModel();
    private bool _editParamDialogVisible = false;
    private int _sliderDynParamValue;
    private bool _isOpenParamsListDialog = false;
    private object selectedItemParamValue;

    private MudForm _editParamForm;
    private MudListItem selectedItem;
    private MudForm _editParamListFormDialog;

    /////////////////////////////////////////////////////////////////////////////////////////////////////////

    private IhtDevices.PasswordLevel_SW _userPasswordLevel = IhtDevices.PasswordLevel_SW.Level_0;
    private string _setupPasswordValue = "";
    private bool _setupPasswordDialogVisible = false;

    private bool _torchInstalledDialogVisible = false;
    private bool _performResetDevices = false;
    private bool _torchInstalledDialogIsBlocked = false;

    private TableGroupDefinition<ParameterDataModel> _groupDefinition = new()
    {
        GroupName = "Group",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.ViewGroup
    };

    private IEnumerable<ParameterDataModel> Elements = new List<ParameterDataModel>();

    private Dictionary<string, IhtDevices.PasswordLevel_SW> _passwordToLevelDictionary = new Dictionary<string, IhtDevices.PasswordLevel_SW>()
    {
        { "0000", IhtDevices.PasswordLevel_SW.Level_0 },
        { "1111", IhtDevices.PasswordLevel_SW.Level_1 },
        { "2222", IhtDevices.PasswordLevel_SW.Level_2 },
        { "3333", IhtDevices.PasswordLevel_SW.Level_3 }
    };

    protected override async Task OnInitializedAsync()
    {
        await GetSetupParametersAsync();
    }

    private async Task GetSetupParametersAsync()
    {
        Elements = await parameterDataInfoManager.GetDeviceSetupParamsAsync(dynDataModificationCNCDataProvider.CurrentDeviceNumber, CancellationToken.None);

        if (Elements != null)
        {
            Elements = Elements.Where(p => p.PasswordLevel <= _userPasswordLevel);
        }
    }

    private async Task Connection()
    {
        _torchInstalledDialogIsBlocked = true;

        await Task.Delay(TimeSpan.FromSeconds(0.05));

        //TODO: Change: use dependency injection instead of the "new IhtModbusCommunicInfo(...)"
        //var ihtModbusCommunicInfo = new IhtModbusCommunicInfo(ihtDevices, apcSimulationDataMockDBService, parameterDataInfoManager);

        await apcCommunicManager.Init(_nameComPort, _isSimulation, _performResetDevices);

        ConnectedTorchesInstalledClientReceivedDataRefreshIsNeeded?.Invoke(this, EventArgs.Empty);

        navigationManager.NavigateTo(navigationManager.Uri, true);
    }

    private bool IsDeviceDisabled(bool IsEnableds)
    {
        return !IsEnableds;
    }

    private bool IsSPButtonsDisabled()
    {
        return dynDataModificationCNCDataProvider.IsCurrentDeviceBusy || !CurrentDevice.IsConnected;
    }

    private void OpenSetupParamsDialog()
    {
        _setupParamsDialogVisible = true;
    }

    private void CloseSetupParamsDialog()
    {
        _setupParamsDialogVisible = false;
    }

    private void OpenPasswordSetupDialog()
    {
        _setupPasswordValue = string.Empty;

        _setupPasswordDialogVisible = true;
    }

    private void ClosePasswordSetupDialog()
    {
        _setupPasswordValue = string.Empty;

        _setupPasswordDialogVisible = false;
    }

    private void OpenTorchInstalledDialog()
    {
        _torchInstalledDialogVisible = true;
    }

    private void CloseTorchInstalledDialog()
    {
        _torchInstalledDialogVisible = false;
    } 



    private void SetNewPasswordLevel()
    {
        IhtDevices.PasswordLevel_SW newPasswordLevel;

        if (_passwordToLevelDictionary.TryGetValue(_setupPasswordValue, out newPasswordLevel))
        {
            _userPasswordLevel = newPasswordLevel;

            GetSetupParametersAsync().Wait();
        }

        ClosePasswordSetupDialog();
    }

    private async Task GetEditPassword(string passSimbol)
    {
        if(passSimbol == "x")
        {
            if (!string.IsNullOrEmpty(_setupPasswordValue))
            {
                _setupPasswordValue = _setupPasswordValue.Remove(_setupPasswordValue.Length - 1);
            }
            else
            {
                return;
            }
        }
        else
        {
            if (_setupPasswordValue.Length < 4)
            {
                _setupPasswordValue = $"{_setupPasswordValue}{passSimbol}";
            }

            if(_setupPasswordValue.Length == 4)
            {
                await Task.Delay(TimeSpan.FromSeconds(0.2));
                SetNewPasswordLevel();
            }
        }
    }

    private void OpenEditParamDialog()
    {
        _editParamDialogVisible = true;
    }

    private void GetParamDataModel(Guid id)
    {
        dynParamDataModel = Elements.FirstOrDefault(p => p.Id == id) ?? new ParameterDataModel();
    }

    private void OpenParamsListDialog()
    {
        _isOpenParamsListDialog = true;
    }

    private void CloseEditParamDialog()
    {
        // dynParamDataModel.Position = _sliderDynParamValue;

        _editParamDialogVisible = false;
    }

    private void ResetPassword()
    { 
        _userPasswordLevel = IhtDevices.PasswordLevel_SW.Level_0;

        GetSetupParametersAsync().Wait();
        ClosePasswordSetupDialog();
    }

    private bool GetReadOnlyStatus(int number)
    {
        var returnVal = false;

        if(number == 1)
        {
            returnVal = true;
        }

        return returnVal;
    }

    private void RowClickEvent(TableRowClickEventArgs<ParameterDataModel> tableRowClickEventArgs)
    {
        var id = tableRowClickEventArgs.Item.Id;
        var editMode = tableRowClickEventArgs.Item.DynParams?.ParameterDataInfo?.ViewParameter?.Mode;

        GetParamDataModel(id);

        if (editMode != null && editMode == "Slider")
        {
            OpenEditParamDialog();
        }
        else if (editMode != null && editMode == "Select")
        {
            OpenParamsListDialog();
        }

    }

    private void ParameterValChangedBySlider()
    {
        // Save data in to the DB
    }

    private void SelectedListItemParamChanged(MudListItem mudListItem)
    {
        if (mudListItem != null)
        {
            dynParamDataModel.DynParams.Value = (int)mudListItem.Value;
        }
    }

    private void CloseParamsListDialog()
    {
        _isOpenParamsListDialog = false;
    }

    ///// ---- preFlowActive indicator ----

    public int preflowActiveValue;

    private bool preflowActiveDisabled = true;

    public async void SimulateProgress()
    {
        preflowActiveValue = 5;
        do
        {
            //if (_disposed)
            //{
            //	return;
            //}

            await Task.Delay(TimeSpan.FromSeconds(1));

            preflowActiveValue = preflowActiveValue - 1;
            StateHasChanged();


        } while (preflowActiveValue > 0);

        preflowActiveDisabled = true;
        PreflowStarted = false;
    }

    private bool _preflowStarted;
    bool PreflowStarted
    {
        get { return _preflowStarted; }
        set { _preflowStarted = value; PreflowStartSwitch_ChangedValue(value);  }
    }

    private void PreflowStartSwitch_ChangedValue(bool isChecked)
    {
        if (dynParamDataModel == null || dynParamDataModel.DynParams == null) return;

        dynParamDataModel.DynParams.Value = isChecked ? 1 : 0;

        var paramName = dynParamDataModel.ParamName;
        var paramVal = dynParamDataModel.DynParams?.Value;

        if(paramName == IhtModbusParamDyn.eIdxAdditional.StartPreflow.ToString() && paramVal == 1)
        {
            preflowActiveDisabled = false;
            SimulateProgress();
        }
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////

    private int APCDevicesCount {
        get
        {
            return ihtDevices.GetDevices().Where(d => d.IsVisible && (_isSimulation || d.IsConnected)).Count();
        }
    }

    private int APCDevicesErrorCount {
        get
        {
            return ihtDevices.GetDevices().Where(d => d.IsVisible && !_isSimulation && !d.IsConnected && APCDevicesCount > 0).Count();
        }
    }

    private string drawerDisplay {
        get
        {
            return _torchInstalledDialogIsBlocked ? DISPLAY_CLASS : NONE_DISPLAY_CLASS;
        }
    }

    private IhtDevice CurrentDevice
    {
        get
        {
            return ihtDevices.GetDevice(dynDataModificationCNCDataProvider.CurrentSlaveId);
        }
    }

    private void ToggleMenu()
    {
        _menuExpanded = !_menuExpanded;

    }

    protected override void OnInitialized()
    {
        dynDataModificationCNCDataProvider.DynamicAPCParamsDataChanged += DynamicAPCParamsOnDynamicAPCParamsDataChanged;
        this.DynamicAPCParamsClientChanged += dynDataModificationCNCDataProvider.dynamicParamsDysplay_DynamicAPCParamsClientChanged;

        // Subscribe of Data Provider for the Client Event of moving torch (Up or Down)
        this.APCTorchPositionChanged += dynDataModificationCNCDataProvider.dynamicParamsDysplay_APCTorchPositionChanged;

        // Subscribe of Data Provider for the Client Event of stopping the torch
        this.APCTorchPositionStoped += dynDataModificationCNCDataProvider.dynamicParamsDysplay_APCTorchPositionStoped;

        // Subscribe for event of client stopping working with the torch
        ClientStartedOrStoppedWorkingWithDeviceRefreshIsNeeded += DynamicAPCParamsOnDynamicAPCParamsDataChanged;

        // Subscribe for event of client connected to the devices and received the data
        ConnectedTorchesInstalledClientReceivedDataRefreshIsNeeded += DynamicAPCParamsOnConnectedTorchesInstalled;

        base.OnInitialized();
    }



    private async void SetParamsType(string paramsType)
    {
        dynDataModificationCNCDataProvider.CurrentParamsType = paramsType;

        await dynDataModificationCNCDataProvider.RefreshDynamicDataModelToDisplayAsync();

        await InvokeAsync(StateHasChanged);
    }

    private async void SetDeviceNum(int deviceNum)
    {
        if (deviceNum <= APCDevicesCount)
        {
            // Stop the SP moving
            StopTorchMoving();

            // Reset the SP value to the start val
            spValueCurrent = 50;

            dynDataModificationCNCDataProvider.CurrentDeviceNumber = deviceNum;

            await dynDataModificationCNCDataProvider.RefreshDynamicDataModelToDisplayAsync();

            await InvokeAsync(StateHasChanged);
        }
    }

    private string GetParamsTypeClass(string selectedType)
    {
        if (selectedType.ToLower() == dynDataModificationCNCDataProvider.CurrentParamsType.ToLower())
            return "SelectedParamsType tabcell";
        return "UnselectedParamsType tabcell";
    }

    private string GetDeviceNumClass(int selectedNum)
    {
        var cssClass = "NotInUseDeviceNum device_tabcell";

        if (selectedNum == dynDataModificationCNCDataProvider.CurrentDeviceNumber){
            cssClass = "SelectedDeviceNum device_tabcell";
        }
        else if(selectedNum <= APCDevicesCount)
        {
            cssClass = "UnselectedDeviceNum device_tabcell";
        }
        else if(selectedNum <= APCDevicesErrorCount + APCDevicesCount)
        {
            cssClass = "NotConnectedDevice device_tabcell";
        }

        return cssClass;
    }

    private void StopTorchMoving()
    {
        if (isTorchStartedMoving)
        {
            isTorchStartedMoving = false;

            this.APCTorchPositionStoped?.Invoke("StopTorch", EventArgs.Empty);

            ClientStartedOrStoppedWorkingWithDeviceRefreshIsNeeded?.Invoke(this, EventArgs.Empty);
        }
    }

    private void StartMovingTorch(string eventName)
    {
        if (!isTorchStartedMoving)
        {
            isTorchStartedMoving = true;

            this.APCTorchPositionChanged?.Invoke(eventName, EventArgs.Empty);

            ClientStartedOrStoppedWorkingWithDeviceRefreshIsNeeded?.Invoke(this, EventArgs.Empty);
        }
    }

    private void UpdateDynParam(ParameterDataModel parameterData)
    {
        OnParamChanged(parameterData);
    }

    private async void DynamicAPCParamsOnDynamicAPCParamsDataChanged(object? sender, EventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }

    private async void DynamicAPCParamsOnConnectedTorchesInstalled(object? sender, EventArgs e)
    {
        await dynDataModificationCNCDataProvider.RefreshDynamicDataModelToDisplayAsync();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        dynDataModificationCNCDataProvider.DynamicAPCParamsDataChanged -= DynamicAPCParamsOnDynamicAPCParamsDataChanged;
        this.DynamicAPCParamsClientChanged -= dynDataModificationCNCDataProvider.dynamicParamsDysplay_DynamicAPCParamsClientChanged;

        this.DynamicAPCParamsClientChanged -= dynDataModificationCNCDataProvider.dynamicParamsDysplay_APCTorchPositionChanged;
        this.APCTorchPositionStoped -= dynDataModificationCNCDataProvider.dynamicParamsDysplay_APCTorchPositionStoped;

        // Stop the SP moving and refresh component for all the users
        dynDataModificationCNCDataProvider.StopMovingTorchAsync();
        ClientStartedOrStoppedWorkingWithDeviceRefreshIsNeeded?.Invoke(this, EventArgs.Empty);

        ClientStartedOrStoppedWorkingWithDeviceRefreshIsNeeded -= DynamicAPCParamsOnDynamicAPCParamsDataChanged;

        ConnectedTorchesInstalledClientReceivedDataRefreshIsNeeded -= DynamicAPCParamsOnConnectedTorchesInstalled;
    }

    private void ParamSelected1(ChangeEventArgs args)
    {
        //dynDataModificationCNCDataProvider._paramHeatO2.DynParams.Value = args.Value;
        //OnParamChanged();
    }

    private void OnParamChanged(object eventParam)
    {
        this.DynamicAPCParamsClientChanged?.Invoke(eventParam, EventArgs.Empty);
    }

}