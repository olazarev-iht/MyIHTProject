@inherits IhtComponentBase
@using SharedComponents.Models
@using SharedComponents.Services.CuttingDataDBServices
@using SharedComponents.Models.CuttingData
@inject ICuttingDataDBService cuttingDataDBService
@inject INozzleDBService nozzleDBService
@inject MudBlazor.ISnackbar snackBar

<PageTitle>Cutting Data</PageTitle>

<MudText Typo="Typo.h3">Cutting Data</MudText>

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Customers</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="cuttingDataModel.Material.Name" Label="Material" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="cuttingDataModel.Remark" Label="Remark" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="cuttingDataModel.Nozzle.Name" Label="Nozzle" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save</MudButton>
    </MudCardContent>
</MudCard>


<MudDialog @bind-IsVisible="_editParamsDialogVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">@cuttingDataModel.Remark</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@cuttingDataModel"
                 @ref="_editForm">
            <MudTextField @bind-Value="@cuttingDataModel.Material.Name" 
                          Label="Material"
                          For=@(() => cuttingDataModel.Material.Name) />
            <br />
            <MudTextField @bind-Value="@cuttingDataModel.Remark" 
                          Label="Remark"
                          Lines="2"
                          For=@(() => cuttingDataModel.Remark) />
            <br />
            <MudNumericField Label="Thickness" 
                          @bind-Value="@cuttingDataModel.Thickness"
                          For="(() => cuttingDataModel.Thickness)" />
            <br />
            <MudSelect T="Guid" HelperText="@cuttingDataModel.Nozzle?.Id.ToString()" @bind-Value="cuttingDataModel.NozzleId" Label="Nozzle" AdornmentIcon="@Icons.Material.Filled.Search">
                @foreach (var nozzleModel in nozzleModelList)
                {
                    <MudSelectItem T="Guid" Value="@nozzleModel.Id">@nozzleModel.Name</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="MudBlazor.Color.Secondary" 
                   OnClick="CloseEditParamsModal">
            Cancel
        </MudButton>
        <MudButton Variant="Variant.Filled" 
                   Color="MudBlazor.Color.Primary" 
                   OnClick="UpdateParamsAsync">
            Save
        </MudButton>
    </DialogActions>
</MudDialog>

<br />
<MudTable Elevation="25" RowsPerPage="8" Items="@cuttingDataModelList" Filter="new Func<CuttingDataModel, bool>(Search)" Hover="true"
    @bind-cuttingDataModel="cuttingDataModel">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Parameters</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Customers..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Material</MudTh>
        <MudTh>Remark</MudTh>
        <MudTh>Thickness</MudTh>
        <MudTh>Nozzle</MudTh>
        <MudTh>Cutting speed</MudTh>
        <MudTh>Origin</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Material">@context.Material?.Name</MudTd>
        <MudTd DataLabel="Remark">@context.Remark</MudTd>
        <MudTd DataLabel="Thickness">@context.Thickness</MudTd>
        <MudTd DataLabel="Nozzle">@context.Nozzle?.Name</MudTd>
        <MudTd DataLabel="Origin">@context.idCutDataParent</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 8, 10, 12 }" />
    </PagerContent>
</MudTable>


@code {
    private bool _createParamsDialogVisible;
    private bool _editParamsDialogVisible;
    private MudForm _createForm;
    private MudForm _editForm;

    private string searchString = "";
    private CuttingDataModel cuttingDataModel = new CuttingDataModel();
    private NozzleModel nozzle = new NozzleModel();
    private List<CuttingDataModel> cuttingDataModelList = new List<CuttingDataModel>();
    private IEnumerable<NozzleModel> nozzleModelList = new List<NozzleModel>();

    protected override async Task OnInitializedAsync()
    {
        await GetEntriesAsync();
        await GetNozzlesAsync();
    }
    private async Task<List<CuttingDataModel>> GetEntriesAsync()
    {
        cuttingDataModelList = await cuttingDataDBService.GetEntriesAsync(CancellationToken.None);
        return cuttingDataModelList;
    }

    private async Task GetNozzlesAsync()
    {
        nozzleModelList = await nozzleDBService.GetEntriesAsync(CancellationToken.None);
    }

    private bool Search(CuttingDataModel cuttingDataModel)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if ((cuttingDataModel.Material?.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            //|| cuttingDataModel.Thickness == (searchString, StringComparison.OrdinalIgnoreCase)
            || (cuttingDataModel.Nozzle?.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false))
        {
            return true;
        }
        return false;
    }


    private async Task UpdateParamsAsync()
    {
        if (_editForm.IsValid)
        {
            await cuttingDataDBService.UpdateEntryAsync(cuttingDataModel.Id.ToString(), cuttingDataModel, CancellationToken.None);
            _editParamsDialogVisible = false;
            await GetEntriesAsync();
        }
    }

    private void CloseEditParamsModal()
    {
        _editParamsDialogVisible = false;
    }

    private async void Save()
    {
        await cuttingDataDBService.AddEntryAsync(cuttingDataModel, CancellationToken.None);
        cuttingDataModel = new CuttingDataModel();
        snackBar.Add("Customer Saved.", Severity.Success);
        await GetEntriesAsync();
    }

    private void Edit(string id)
    {
        cuttingDataModel = cuttingDataModelList.FirstOrDefault(c => c.Id == id) ?? new CuttingDataModel();
        _editParamsDialogVisible = true;
    }

    private async void Delete(string id)
    {
        await cuttingDataDBService.DeleteEntryAsync(id, CancellationToken.None);
        snackBar.Add("Customer Deleted.", Severity.Success);
        await GetEntriesAsync();
    }

}
}
